Introduction
    const strings = ['a', 'b', 'c', 'd'];
    //4*4 = 16bytes of storage

    //push
    strings.push('e');              //O(1)

    //pop
    strings.pop();                  //O(1)

    //unshift: insert at the beginning
    strings.unshift('x')            //O(n)

    //splice
    strings.splice(2, 0, 'alien')   //O(n/2) = O(n)

Static & Dynamic Array
    [C++]
    int a[20];
    int b[5] =  {1,2,3,4,5};

Optional Classes
    Reference type
        
        var object1 = { value: 10 };
        var object2 = object1;
        var object3 = { value: 10 };

        object1 === object2 => true
        object1 === object3 => false

        object1.value = 15;
        object2.value = ?  (also 15)
    
    Context vs Scope
        
        console.log(this);

        const object4 = {
            a: function(){
                console.log(this);
            }
        }
    
    Instantiation
    
        class Player {
            constructor(name, type) {
                this.name = name;
                this.type = type;
            }

            introduce(){
                console.log(`Hi, I am ${this.name} and i am a ${this.type}`);
            }
        }

        class Wizard extends Player{
            constructor(name, type){
                super(name, type);
            }
            play(){
                console.log(`I can use ${this.type} weapons`);
            }
        }

        const wizard1 = new Wizard('Shelly', 'Healer');
        const wizard2 = new Wizard('Loly', 'Killer');
    
    Implementing an Array
        class MyArray{
            constructor(){
                this.length = 0;
                this.data = {};
            }

            get(index){
                return this.data[index];
            }

            push(item){
                this.data[this.length] = item;
                this.length++;
                return this.length;
            }

            pop(){
                const lastItem = this.data[this.length - 1];
                delete this.data[this.length - 1];
                this.length--;
                return lastItem;
            }

            delete(index){
                const item = this.data[index];
                this.shiftItems(index);
                return item;
            }

            shiftItems(index){
                for(let i = index; i < this.length - 1; i++){
                    this.data = this.data[i+1];
                    delete this.data[this.length-1];
                    this.length--;
                }
            }
        }

        const newArray =  new MyArray();
        newArray.push("hi");
        newArray.push("there");
        newArray.push("!");
        newArray.pop();
        console.log(newArray.get(0)); //undefined
    
    Strings and Array
        - Create a function that reserves a string
        
            function StringReverse(str){
                //check input
                if(!str || str.length < 2 || typeof str != "string") return;

                const backwards = [];
                
                const totalItems = str.length - 1;

                for(let i = totalItems; i >= 0; i--){
                    backwards.push(str[i]);
                }

                return backwards; 
            }

            function StringReverseVer2(str){
                return str.split('').reserve().join('');
            }

            const StringReverseVer3 = str => [...str].reserve().join('');
        
    Merge Sorted Arrays
        //mergeSortedArrays([0,3,4,5], [4,6,30]);

        function mergeSortedArrays(array1, array2){
            const mergedArray = [];

            let array1Item = array1[0];
            let array2Item = array2[0];
            let i = 1;
            let j = 1;

            //check input
            if(array1.length === 0){
                return array2;
            }
            if(array2.length === 0){
                return array1;
            }

            while(!array2Item || array1Item || array2Item){
                if(array1Item < array2Item){
                    mergedArray.push(array1Item);
                    array1Item = array1[i];
                    i++;
                }else{
                    mergedArray.push(array2Item);
                    array2Item = array2[j];
                    j++;
                }
            }

            return mergedArray;
        }
    
    Review Array
        + fast lookups
        + fast push/pop
        + ordered

        - slow insert
        - slow deletes
        - fixed size (static array)
    