WHAT MAKE JS UNIQUE?

    1. Functions are Objects
        Ways to call functions:
        1:
            function one(){
                return 1;
            }
        2:
            const obj = {
                two(){
                    return 2;
                }
            }
            obj.two();
        3:
            function three(){
                return 3;
            }
            three.call();
        4: Function Constructor: Function(parameter, code body)
        
            const four = new Function('number', 'return number');
            four(); 
        
    => Function are callable objects

    2. First Class Citizen
        Funtions are first class citizen in Javascript
            - can be assign to variable
                var stuff = function(){

                }
            
            - can be passed as a parameter

                function a(fn){
                    fn();
                }
                
                a(function() { console.log('hi there') });
            
            - return functions as a values from the others functions

                function b(){
                    return function c() {console.log('bye')};
                }
                b();   => function c()
                b()(); => bye
    
    3. Higher Order Functions
        a function that can take function as an argument or function that returns another function

        Normal:
            function letAdamLogin(){
                let array = [];
                for(let i = 0; i < 100000; i++){
                    array.push(i);
                }

                return 'Access Granted to Adam';
            }

        Medium:
            const giveAccessTo = name =>{
                return 'Access Granted to' + name;
            }

            function letUserLogin(user){
                let array = [];

                for(let i = 0; i < 100000; i++){
                    array.push(i);
                }

                return giveAccessTo(user);
            }

            letUserLogin('Adam');
            letUserLogin('Eva');

        Higher Order:
            const multiplyBy = (num1) => (num2) => num1 * num2;

            multiplyBy(4)(6);
        
    4. Closures
        function() + Lexical Scope
            - Memory efficient
            - Encapsulation

        Example:
            function a (){
                let grandpa = 'grandpa';
                
                return function b (){
                    let father = 'father';
                    
                    return function c (){
                        let son = 'son';
                        
                        return `${grandpa} > ${father} > ${son}`
                    }
                }
            }

            a();
            a()();
            a()()();
            b(); ??!!

        Example:
            const sayHi = (string) => (firstName) => (lastName) => 
                console.log(`${string} ${firstName} ${lastName}`)

            sayHi('hi')('Tran')('Linh');

        Example:
            function heavyDuty(index){
                const bigArray = new Array(7000).fill('unit');
                return bigArray;
            }

            heavyDuty(100);
            heavyDuty(100);
            heavyDuty(100);
            heavyDuty(100);

            //Solution
            function heavyDuty2(index){
                const bigArray = new Array(7000).fill('unit');
                return function (index) {
                    return bigArray[index];
                }
            }

            heavyDuty2(100);
            heavyDuty2(100);
            heavyDuty2(100);
        
        Example:
            const array = [1,2,3,4];

            for(var i=0; i < array.length; i++){ //should be let i = 0
                setTimeout(function(){
                    console.log('I am index ' + i);
                }, 3000);
            }
        
        Example:
            const array = [1,2,3,4];


            for(var i=0; i < array.length; i++){ //should be let i = 0
                (function(closureI){
                    setTimeout(function(){
                        console.log('I am index ' + array[closureI]);
                    }, 3000);
                })(i)
            }
    
    5. PROTOTYPES
        Prototype Inheritance
            Example:
                let dragon = {
                    name: 'Drogo',
                    fire: true,
                    
                    fight() {
                        return 5;
                    },

                    sing() {
                        if(this.fire){
                            return `I am ${this.name}, the breather of fire
                        }             
                    }
                }

                let lizard = {
                    name: 'Kika',
                    fight(){
                        return 1;
                    }
                }

                lizard.__proto__ = dragon();
                lizard.sing();
        
        Example:
            let human = {
                mortal: true
            }

            let socrates = Object.create(human);
            socrates.age = 45;
        
        * Only functions have the prototype property
