Pure Function:
    always return the same output (given the same input)  (Referential Transparency)
    can't modify anthing outside of itself (no side effect)
    <=> Predicable => reduce bugs
    => idea is minimize side effect

    Function should be:
        1 task
        return statement
        pure
        no shared state
        immutable state
        composable
        predicable

    Example:
        const array = [1,2,3];

        function a(arr){
            arr.pop(); //side effect
        }

        function removeItem(arr){
            const newArray = [].concat(arr);
            newArray.pop();         // no side effect
            return newArray;
        }

Idempotence
    get the same return every time call function => predicable

Imperative vs Declarative
    A Computer is better at being imperative, it need to know how to do things
    Human are more Declarative ( you dont need to ask someone exactly single step to do something)
    => Functional Programming is more Declarative

Immutability
    not changing the data & state
    => making a copy and return new everytime

High Order Function
    Example:
        const hof = () => () => 5;
        hof(); //funtion
        hof()(); //5

Closure
    const closure = function(){
        let count = 0;
        return function increment(){
            count++;
            return count;
        }
    }

    const incrementFn = closure(); //Function
    increment(); //1
    increment(); //2
    increment(); //3     

Currying
    Take a function that can take multiple parameters and instead use incurrying mopdify it to a function that take one parameter at time
    Example:
        const multiply = (a,b) => a*b;
        const curriedMultiply = (a) => (b) => a*b;
        curriedMultiply(5)(4); //20

        const multiByFive = curriedMultiply(5);
        multiByFive(4); //20

Partial Application
    Example:
        const multiply = (a,b,c) => a*b*c;
        const partialMultiplyByFive = multiply.bind(null, 5);
        partialMultiplyByFive(4, 10); //200

MCI Memoization ~~~~ Caching
    Caching = store data that you can use later on
    
    Example:
        function addTo80(n){
            return n+80;
        }

        functiom memoizedAddTo80(){
            let cache = {};
            return function(n){
                if(n in cache){
                    return cache[n];
                }else{
                    cache[n] = n + 80;
                    return cache[n];
                }
            }
        }
        const memized = memoizedAddTo80();

Compose and Pipe
    Compose:
        Example:
            compose = (f,g) => data => f(g(data));
            const multiplyBy3 = num => num*3;
            const makePositive = num => Math.abs(num);
            const multiplyBy3AndAbsolute = compose(multiplyBy3, makePositive);

            multiplyBy3AndAbsolute(-50); //150
    
    Pipe: the same as Compose but it is left to right
            pipe = (f,g) => data => g(f(data));

Arity
    the number of parameter

Excersice Amazon shoping
        
const user = {
  name: 'Kim',
  active: true,
  cart: [],
  purchases: []
}
const history1 = [];
const compose = (f, g) => (...args) => f(g(...args))
const pipe = (f, g) => (...args) => g(f(...args))
const purchaseItem  = (...fns) => fns.reduce(compose);
const purchaseItem2  = (...fns) => fns.reduce(pipe);
purchaseItem2(
  addItemToCart,
  applyTaxToItems,
  buyItem,
  emptyUserCart,
)(user, {name: 'laptop', price: 60})
// purchaseItem(
//   emptyUserCart,
//   buyItem,
//   applyTaxToItems,
//   addItemToCart
// )(user, {name: 'laptop', price: 50})
function addItemToCart(user, item) {
  history1.push(user)
  const updatedCart = user.cart.concat(item)
  return Object.assign({}, user, {cart: updatedCart});
}

function applyTaxToItems(user) {
  history1.push(user)
  const {cart} = user;
  const taxRate = 1.3;
  const updatedCart = cart.map(item => {
    return {
      name: item.name,
      price: item.price*taxRate
    }
  })
  return Object.assign({}, user, { cart: updatedCart });
}

function buyItem(user) {
  history1.push(user)
  const itemsInCart = user.cart;
  return Object.assign({}, user, { purchases: itemsInCart });
}
function emptyUserCart(user) {
  history1.push(user)
  return Object.assign({}, user, { cart: [] });
}

function refundItem() {

}

function getUserState() {

}

function goBack() {

}

function goForward() {

}